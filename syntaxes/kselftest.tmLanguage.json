{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "kselftest",
	"patterns": [
		{"include": "#tap"},
		{"include": "#make"}
	],
	"repository": {
		"tap": {
			"name": "meta.tap.kselftest",
			"patterns": [
				{
					"name": "log.extra.version.tap.kselftest",
					"match": "TAP version [0-9]+"
				},
				{
					"name": "log.punctuation.set.tap.kselftest",
					"match": "[0-9]+[.][.][0-9]+"
				},
				{
					"name": "meta.ok.tap.kselftest",
					"match": "(ok) ([0-9]+) ([^#]*)(?:(#)(.*))?",
					"captures": {
						"1": {"name": "log.header.ok.tap.kselftest"},
						"2": {"name": "log.header.id.tap.kselftest"},
						"3": {"name": "log.ok.tap.kselftest"},
						"4": {"name": "log.punctuation.ok.kselftest"},
						"5": {"name": "log.relative.ok.kselftest"}
					}
				},
				{
					"name": "meta.not-ok.tap.kselftest",
					"match": "(not ok) ([0-9]+) ([^#]*)(?:(#)(.*))?",
					"captures": {
						"1": {"name": "log.header.not-ok.tap.kselftest"},
						"2": {"name": "log.header.id.tap.kselftest"},
						"3": {"name": "log.not-ok.tap.kselftest"},
						"4": {"name": "log.punctuation.not-ok.kselftest"},
						"5": {"name": "log.relative.not-ok.kselftest"}
					}
				},
				{
					"name": "meta.indent.tap.kselftest",
					"match": "(#)(?: (.+))?",
					"captures": {
						"1": {"name": "log.punctuation.indent.tap.kselftest"},
						"2": {
							"patterns": [
								{"include": "#tap"},
								{
									"name": "log.relative.tap.kselftest",
									"match": ".*"
								}
							]
						}
					}
				}
			]
		},
		"make": {
			"name": "meta.make.kselftest",
			"patterns": [
				{
					"name": "meta.make.recipe.call.kselftest",
					"match": "^  ([A-Z_]+) +(.+)$",
					"captures": {
						"1": {"name": "keyword.recipe.call.make.kselftest"},
						"2": {"name": "variable.parameter.recipe.make.kselftest"}
					}
				},
				{
					"name": "meta.make.log.kselftest",
					"match": "^(make\\[[0-9]+\\]:) (.+)$",
					"captures": {
						"1": {"name": "log.extra.make.output.kselftest"},
						"2": {"name": "log.relative.make.output.kselftest"}
					}
				},
				{
					"name": "meta.make.recipeline.call.kselftest",
					"match": "([^ ]+)(.*)",
					"captures": {
						"1": {"name": "entity.name.function.call.make.recipeline.kselftest"},
						"2": {
							"name": "meta.make.recipeline.call.params.kselftest",
							"patterns": [
								{
									"name": "meta.make.recipeline.call.params.long.kselftest",
									"match": " (--)([A-Za-z0-9-_]+)(=)([^ ]*)",
									"captures": {
										"1": {"name": "punctuation.dash.make.recipeline.long.kselftest"},
										"2": {"name": "variable.parameter.key.make.recipeline.long.kselftest"},
										"3": {"name": "punctuation.equals.make.recipeline.long.kselftest"},
										"4": {"name": "variable.parameter.make.recipeline.long.kselftest"}
									}
								},
								{
									"name": "meta.make.recipeline.call.params.short.kselftest",
									"match": " (-)([A-Za-z0-9-_])([ =])?([^ ]*)",
									"captures": {
										"1": {"name": "punctuation.dash.make.recipeline.short.kselftest"},
										"2": {"name": "variable.parameter.key.make.recipeline.short.kselftest"},
										"3": {"name": "punctuation.equals.make.recipeline.short.kselftest"},
										"4": {"name": "variable.parameter.make.recipeline.short.kselftest"}
									}
								},
								{
									"name": "meta.make.recipeline.call.argument.kselftest",
									"match": " ([^ ]+)",
									"captures": {
										"1": {"name": "constant.make.recipeline.argument.kselftest"}
									}
								}
							]
						}
					}
				}
			]
		}
	},
	"scopeName": "source.kselftest"
}